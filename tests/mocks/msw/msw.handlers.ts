/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from 'msw'
import { faker } from '@faker-js/faker'
import dayjs from 'dayjs'
import {
  confirmOrderResponseMock,
  createOrderEstimationTaskResponseMock,
  orderItemResponseMock,
  getCatalogCategoryResponseMock,
  getInvoiceResponseMock,
  getOAuthScopesResponseMock,
  getOrderEstimationTaskResponseMock,
  getOrderItemResponseMock,
  listOrderItemsResponseMock,
  getProductBlankMockupsResponseMock,
  getProductMockupsResponseMock,
  getProductMockupTemplatesResponseMock,
  getProductResponseMock,
  getProductSizeGuideResponseMock,
  getProductStockAvailabilityResponseMock,
  getProductVariantResponseMock,
  getStoreResponseMock,
  getVariantStockAvailabilityResponseMock,
  getVariantBlankMockupsResponseMock,
  listCatalogCategoriesResponseMock,
  listCountriesResponseMock,
  listOrderShipmentsResponseMock,
  listOrdersResponseMock,
  listProductCategoriesResponseMock,
  listProductPricesResponseMock,
  listProductsResponseMock,
  listProductVariantPricesResponseMock,
  listProductVariantsResponseMock,
  listStoresResponseMock,
  orderResponseMock,
} from '../schemas'

faker.seed(1)

const baseURL = 'https://api.printful.com'
const MAX_ARRAY_LENGTH = 20

let i = 0
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0
  }
  return i++
  // return 0
}

export const handlers = [
  http.get(`${baseURL}/v2/oauth-scopes`, async () => {
    const resultArray = [
      [await getGetOAuthScopes200Response(), { status: 200 }],
      [await getGetOAuthScopes401Response(), { status: 401 }],
      [await getGetOAuthScopes5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products`, async () => {
    const resultArray = [
      [await getGetProducts200Response(), { status: 200 }],
      [await getGetProducts401Response(), { status: 401 }],
      [await getGetProducts5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id`, async () => {
    const resultArray = [
      [await getGetProductById200Response(), { status: 200 }],
      [await getGetProductById401Response(), { status: 401 }],
      [await getGetProductById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-variants/:id`, async () => {
    const resultArray = [
      [await getGetVariantById200Response(), { status: 200 }],
      [await getGetVariantById401Response(), { status: 401 }],
      [await getGetVariantById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id/catalog-variants`, async () => {
    const resultArray = [
      [await getGetProductVariantsById200Response(), { status: 200 }],
      [await getGetProductVariantsById401Response(), { status: 401 }],
      [await getGetProductVariantsById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-categories`, async () => {
    const resultArray = [
      [await getGetCategories200Response(), { status: 200 }],
      [await getGetCategories401Response(), { status: 401 }],
      [await getGetCategories5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-categories/:id`, async () => {
    const resultArray = [
      [await getGetCategoryById200Response(), { status: 200 }],
      [await getGetCategoryById401Response(), { status: 401 }],
      [await getGetCategoryById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(
    `${baseURL}/v2/catalog-products/:id/catalog-categories`,
    async () => {
      const resultArray = [
        [await getGetCategoriesByProductId200Response(), { status: 200 }],
        [await getGetCategoriesByProductId401Response(), { status: 401 }],
        [await getGetCategoriesByProductId5XxResponse(), { status: 500 }],
      ]

      return HttpResponse.json(...resultArray[next() % resultArray.length])
    },
  ),
  http.get(`${baseURL}/v2/catalog-products/:id/sizes`, async () => {
    const resultArray = [
      [await getGetProductSizeGuideById200Response(), { status: 200 }],
      [await getGetProductSizeGuideById404Response(), { status: 404 }],
      [await getGetProductSizeGuideById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id/prices`, async () => {
    const resultArray = [
      [await getGetProductPricesById200Response(), { status: 200 }],
      [await getGetProductPricesById404Response(), { status: 404 }],
      [await getGetProductPricesById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-variants/:id/prices`, async () => {
    const resultArray = [
      [await getGetVariantPricesById200Response(), { status: 200 }],
      [await getGetVariantPricesById404Response(), { status: 404 }],
      [await getGetVariantPricesById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id/images`, async () => {
    const resultArray = [
      [await getGetProductImagesById200Response(), { status: 200 }],
      [await getGetProductImagesById401Response(), { status: 401 }],
      [await getGetProductImagesById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-variants/:id/images`, async () => {
    const resultArray = [
      [await getGetVariantImagesById200Response(), { status: 200 }],
      [await getGetVariantImagesById401Response(), { status: 401 }],
      [await getGetVariantImagesById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id/mockup-styles`, async () => {
    const resultArray = [
      [await getRetrieveMockupStylesByProductId200Response(), { status: 200 }],
      [await getRetrieveMockupStylesByProductId401Response(), { status: 401 }],
      [await getRetrieveMockupStylesByProductId404Response(), { status: 404 }],
      [await getRetrieveMockupStylesByProductId5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id/mockup-templates`, async () => {
    const resultArray = [
      [await getGetMockupTemplatesByProductId200Response(), { status: 200 }],
      [await getGetMockupTemplatesByProductId401Response(), { status: 401 }],
      [await getGetMockupTemplatesByProductId5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-products/:id/availability`, async () => {
    const resultArray = [
      [await getGetProductStockAvailabilityById200Response(), { status: 200 }],
      [await getGetProductStockAvailabilityById400Response(), { status: 400 }],
      [await getGetProductStockAvailabilityById401Response(), { status: 401 }],
      [await getGetProductStockAvailabilityById403Response(), { status: 403 }],
      [await getGetProductStockAvailabilityById404Response(), { status: 404 }],
      [await getGetProductStockAvailabilityById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/catalog-variants/:id/availability`, async () => {
    const resultArray = [
      [await getGetVariantStockAvailabilityById200Response(), { status: 200 }],
      [await getGetVariantStockAvailabilityById400Response(), { status: 400 }],
      [await getGetVariantStockAvailabilityById401Response(), { status: 401 }],
      [await getGetVariantStockAvailabilityById403Response(), { status: 403 }],
      [await getGetVariantStockAvailabilityById404Response(), { status: 404 }],
      [await getGetVariantStockAvailabilityById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/orders`, async () => {
    const resultArray = [
      [await getGetOrders200Response(), { status: 200 }],
      [await getGetOrders401Response(), { status: 401 }],
      [await getGetOrders5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/orders`, async () => {
    const resultArray = [
      [await getCreateOrder200Response(), { status: 200 }],
      [await getCreateOrder400Response(), { status: 400 }],
      [await getCreateOrder5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/orders/:orderId`, async () => {
    const resultArray = [
      [await getGetOrder200Response(), { status: 200 }],
      [await getGetOrder401Response(), { status: 401 }],
      [await getGetOrder404Response(), { status: 404 }],
      [await getGetOrder5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.delete(`${baseURL}/v2/orders/:orderId`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [await getDeleteOrder401Response(), { status: 401 }],
      [await getDeleteOrder404Response(), { status: 404 }],
      [await getDeleteOrder409Response(), { status: 409 }],
      [await getDeleteOrder5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.patch(`${baseURL}/v2/orders/:orderId`, async () => {
    const resultArray = [
      [await getUpdateOrder200Response(), { status: 200 }],
      [await getUpdateOrder400Response(), { status: 400 }],
      [await getUpdateOrder5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/orders/:orderId/confirmation`, async () => {
    const resultArray = [
      [await getConfirmOrder200Response(), { status: 200 }],
      [await getConfirmOrder401Response(), { status: 401 }],
      [await getConfirmOrder5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/orders/:orderId/order-items`, async () => {
    const resultArray = [
      [await getGetItemsByOrderId200Response(), { status: 200 }],
      [await getGetItemsByOrderId400Response(), { status: 400 }],
      [await getGetItemsByOrderId401Response(), { status: 401 }],
      [await getGetItemsByOrderId403Response(), { status: 403 }],
      [await getGetItemsByOrderId404Response(), { status: 404 }],
      [await getGetItemsByOrderId5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/orders/:orderId/order-items`, async () => {
    const resultArray = [
      [await getCreateItemByOrderId200Response(), { status: 200 }],
      [await getCreateItemByOrderId400Response(), { status: 400 }],
      [await getCreateItemByOrderId401Response(), { status: 401 }],
      [await getCreateItemByOrderId403Response(), { status: 403 }],
      [await getCreateItemByOrderId404Response(), { status: 404 }],
      [await getCreateItemByOrderId5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(
    `${baseURL}/v2/orders/:orderId/order-items/:orderItemId`,
    async () => {
      const resultArray = [
        [await getGetItemById200Response(), { status: 200 }],
        [await getGetItemById401Response(), { status: 401 }],
        [await getGetItemById5XxResponse(), { status: 500 }],
      ]

      return HttpResponse.json(...resultArray[next() % resultArray.length])
    },
  ),
  http.patch(
    `${baseURL}/v2/orders/:orderId/order-items/:orderItemId`,
    async () => {
      const resultArray = [
        [await getUpdateItem200Response(), { status: 200 }],
        [await getUpdateItem400Response(), { status: 400 }],
        [await getUpdateItem401Response(), { status: 401 }],
        [await getUpdateItem403Response(), { status: 403 }],
        [await getUpdateItem404Response(), { status: 404 }],
        [await getUpdateItem5XxResponse(), { status: 500 }],
      ]

      return HttpResponse.json(...resultArray[next() % resultArray.length])
    },
  ),
  http.delete(
    `${baseURL}/v2/orders/:orderId/order-items/:orderItemId`,
    async () => {
      const resultArray = [
        [undefined, { status: 204 }],
        [await getDeleteItemById400Response(), { status: 400 }],
        [await getDeleteItemById401Response(), { status: 401 }],
        [await getDeleteItemById403Response(), { status: 403 }],
        [await getDeleteItemById404Response(), { status: 404 }],
        [await getDeleteItemById5XxResponse(), { status: 500 }],
      ]

      return HttpResponse.json(...resultArray[next() % resultArray.length])
    },
  ),
  http.get(`${baseURL}/v2/orders/:orderId/shipments`, async () => {
    const resultArray = [
      [await getGetShipments200Response(), { status: 200 }],
      [await getGetShipments401Response(), { status: 401 }],
      [await getGetShipments5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/orders/:orderId/invoices`, async () => {
    const resultArray = [
      [await getGetInvoiceByOrderId200Response(), { status: 200 }],
      [await getGetInvoiceByOrderId401Response(), { status: 401 }],
      [await getGetInvoiceByOrderId5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/order-estimation-tasks`, async () => {
    const resultArray = [
      [await getGetOrderEstimationTask200Response(), { status: 200 }],
      [await getGetOrderEstimationTask401Response(), { status: 401 }],
      [await getGetOrderEstimationTask404Response(), { status: 404 }],
      [await getGetOrderEstimationTask5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/order-estimation-tasks`, async () => {
    const resultArray = [
      [await getCreateOrderEstimationTask200Response(), { status: 200 }],
      [await getCreateOrderEstimationTask400Response(), { status: 400 }],
      [await getCreateOrderEstimationTask5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/files`, async () => {
    const resultArray = [
      [await getAddFile200Response(), { status: 200 }],
      [await getAddFile400Response(), { status: 400 }],
      [await getAddFile404Response(), { status: 404 }],
      [await getAddFile5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/files/:id`, async () => {
    const resultArray = [
      [await getGetFileById200Response(), { status: 200 }],
      [await getGetFileById400Response(), { status: 400 }],
      [await getGetFileById404Response(), { status: 404 }],
      [await getGetFileById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/countries`, async () => {
    const resultArray = [
      [await getGetCountries200Response(), { status: 200 }],
      [await getGetCountries400Response(), { status: 400 }],
      [await getGetCountries5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/shipping-rates`, async () => {
    const resultArray = [
      [await getCalculateShppingRates200Response(), { status: 200 }],
      [await getCalculateShppingRates400Response(), { status: 400 }],
      [await getCalculateShppingRates5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/warehouse-products`, async () => {
    const resultArray = [
      [await getGetWarehouseProducts200Response(), { status: 200 }],
      [await getGetWarehouseProducts401Response(), { status: 401 }],
      [await getGetWarehouseProducts5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/warehouse-products/:warehouseProductId`, async () => {
    const resultArray = [
      [await getGetWarehouseProductById200Response(), { status: 200 }],
      [await getGetWarehouseProductById401Response(), { status: 401 }],
      [await getGetWarehouseProductById404Response(), { status: 404 }],
      [await getGetWarehouseProductById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/mockup-tasks`, async () => {
    const resultArray = [
      [await getCreateMockupGeneratorTasks200Response(), { status: 200 }],
      [await getCreateMockupGeneratorTasks400Response(), { status: 400 }],
      [await getCreateMockupGeneratorTasks401Response(), { status: 401 }],
      [await getCreateMockupGeneratorTasks404Response(), { status: 404 }],
      [await getCreateMockupGeneratorTasks5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/mockup-tasks`, async () => {
    const resultArray = [
      [await getGetMockupGeneratorTasks200Response(), { status: 200 }],
      [await getGetMockupGeneratorTasks400Response(), { status: 400 }],
      [await getGetMockupGeneratorTasks401Response(), { status: 401 }],
      [await getGetMockupGeneratorTasks404Response(), { status: 404 }],
      [await getGetMockupGeneratorTasks5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/webhooks`, async () => {
    const resultArray = [
      [await getGetWebhooks200Response(), { status: 200 }],
      [await getGetWebhooks401Response(), { status: 401 }],
      [await getGetWebhooks5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/webhooks`, async () => {
    const resultArray = [
      [await getCreateWebhook200Response(), { status: 200 }],
      [await getCreateWebhook400Response(), { status: 400 }],
      [await getCreateWebhook401Response(), { status: 401 }],
      [await getCreateWebhook5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.delete(`${baseURL}/v2/webhooks`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [await getDisableWebhook401Response(), { status: 401 }],
      [await getDisableWebhook404Response(), { status: 404 }],
      [await getDisableWebhook5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/webhooks/:eventType`, async () => {
    const resultArray = [
      [await getGetWebhookEventConfiguration200Response(), { status: 200 }],
      [await getGetWebhookEventConfiguration401Response(), { status: 401 }],
      [await getGetWebhookEventConfiguration5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.post(`${baseURL}/v2/webhooks/:eventType`, async () => {
    const resultArray = [
      [await getCreateWebhookEventConfiguration200Response(), { status: 200 }],
      [await getCreateWebhookEventConfiguration400Response(), { status: 400 }],
      [await getCreateWebhookEventConfiguration401Response(), { status: 401 }],
      [await getCreateWebhookEventConfiguration5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.delete(`${baseURL}/v2/webhooks/:eventType`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [await getDisableWebhookEvent401Response(), { status: 401 }],
      [await getDisableWebhookEvent404Response(), { status: 404 }],
      [await getDisableWebhookEvent5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/stores/:storeId`, async () => {
    const resultArray = [
      [await getGetStoreById200Response(), { status: 200 }],
      [await getGetStoreById401Response(), { status: 401 }],
      [await getGetStoreById404Response(), { status: 404 }],
      [await getGetStoreById5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/stores`, async () => {
    const resultArray = [
      [await getGetStores200Response(), { status: 200 }],
      [await getGetStores401Response(), { status: 401 }],
      [await getGetStores404Response(), { status: 404 }],
      [await getGetStores5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/stores/:storeId/statistics`, async () => {
    const resultArray = [
      [await getGetReports200Response(), { status: 200 }],
      [await getGetReports400Response(), { status: 400 }],
      [await getGetReports401Response(), { status: 401 }],
      [await getGetReports404Response(), { status: 404 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
  http.get(`${baseURL}/v2/approval-sheets`, async () => {
    const resultArray = [
      [await getGetApprovalSheets200Response(), { status: 200 }],
      [await getGetApprovalSheets401Response(), { status: 401 }],
      [await getGetApprovalSheets5XxResponse(), { status: 500 }],
    ]

    return HttpResponse.json(...resultArray[next() % resultArray.length])
  }),
]

export function getGetOAuthScopes200Response() {
  return getOAuthScopesResponseMock()
}

export function getGetOAuthScopes401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetOAuthScopes5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProducts200Response() {
  return listProductsResponseMock()
}

export function getGetProducts401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetProducts5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProductById200Response() {
  return getProductResponseMock()
}

export function getGetProductById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetProductById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetVariantById200Response() {
  return getProductVariantResponseMock()
}

export function getGetVariantById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetVariantById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProductVariantsById200Response() {
  return listProductVariantsResponseMock()
}

export function getGetProductVariantsById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetProductVariantsById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetCategories200Response() {
  return listCatalogCategoriesResponseMock()
}

export function getGetCategories401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetCategories5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetCategoryById200Response() {
  return getCatalogCategoryResponseMock()
}

export function getGetCategoryById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetCategoryById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetCategoriesByProductId200Response() {
  return listProductCategoriesResponseMock()
}

export function getGetCategoriesByProductId401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetCategoriesByProductId5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProductSizeGuideById200Response() {
  return getProductSizeGuideResponseMock()
}

export function getGetProductSizeGuideById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetProductSizeGuideById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProductPricesById200Response() {
  return listProductPricesResponseMock()
}

export function getGetProductPricesById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetProductPricesById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetVariantPricesById200Response() {
  return listProductVariantPricesResponseMock()
}

export function getGetVariantPricesById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetVariantPricesById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProductImagesById200Response() {
  return getProductBlankMockupsResponseMock()
}

export function getGetProductImagesById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetProductImagesById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetVariantImagesById200Response() {
  return getVariantBlankMockupsResponseMock()
}

export function getGetVariantImagesById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetVariantImagesById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getRetrieveMockupStylesByProductId200Response() {
  return getProductMockupsResponseMock()
}

export function getRetrieveMockupStylesByProductId401Response() {
  return {
    data: 'Malformed Authorization header',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header',
    },
  }
}

export function getRetrieveMockupStylesByProductId404Response() {
  return {
    data: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getRetrieveMockupStylesByProductId5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetMockupTemplatesByProductId200Response() {
  return getProductMockupTemplatesResponseMock()
}

export function getGetMockupTemplatesByProductId401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetMockupTemplatesByProductId5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetProductStockAvailabilityById200Response() {
  return getProductStockAvailabilityResponseMock()
}

export function getGetProductStockAvailabilityById400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetProductStockAvailabilityById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetProductStockAvailabilityById403Response() {
  return {
    code: 403,
    result: 'This endpoint requires Oauth authentication!.',
    error: {
      reason: 403,
      message: 'This endpoint requires Oauth authentication!.',
    },
  }
}

export function getGetProductStockAvailabilityById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetProductStockAvailabilityById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetVariantStockAvailabilityById200Response() {
  return getVariantStockAvailabilityResponseMock()
}

export function getGetVariantStockAvailabilityById400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetVariantStockAvailabilityById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetVariantStockAvailabilityById403Response() {
  return {
    code: 403,
    result: 'This endpoint requires Oauth authentication!.',
    error: {
      reason: 403,
      message: 'This endpoint requires Oauth authentication!.',
    },
  }
}

export function getGetVariantStockAvailabilityById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetVariantStockAvailabilityById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetOrders200Response() {
  return listOrdersResponseMock()
}

export function getGetOrders401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetOrders5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCreateOrder200Response() {
  return orderResponseMock()
}

export function getCreateOrder400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCreateOrder5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetOrder200Response() {
  return orderResponseMock()
}

export function getGetOrder401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetOrder404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetOrder5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getDeleteOrder401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getDeleteOrder404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getDeleteOrder409Response() {
  return {
    code: 409,
    result:
      'Attempting to update a resource that is already being updated. Please try again after the previous update has completed',
    error: {
      reason: 409,
      message:
        'Attempting to update a resource that is already being updated. Please try again after the previous update has completed',
    },
  }
}

export function getDeleteOrder5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getUpdateOrder200Response() {
  return orderResponseMock()
}

export function getUpdateOrder400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getUpdateOrder5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getConfirmOrder200Response() {
  return confirmOrderResponseMock()
}

export function getConfirmOrder401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getConfirmOrder5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetItemsByOrderId200Response() {
  return listOrderItemsResponseMock()
}

export function getGetItemsByOrderId400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetItemsByOrderId401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetItemsByOrderId403Response() {
  return {
    code: 403,
    result: 'This endpoint requires Oauth authentication!.',
    error: {
      reason: 403,
      message: 'This endpoint requires Oauth authentication!.',
    },
  }
}

export function getGetItemsByOrderId404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetItemsByOrderId5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCreateItemByOrderId200Response() {
  return orderItemResponseMock()
}

export function getCreateItemByOrderId400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCreateItemByOrderId401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getCreateItemByOrderId403Response() {
  return {
    code: 403,
    result: 'This endpoint requires Oauth authentication!.',
    error: {
      reason: 403,
      message: 'This endpoint requires Oauth authentication!.',
    },
  }
}

export function getCreateItemByOrderId404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getCreateItemByOrderId5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetItemById200Response() {
  return getOrderItemResponseMock()
}

export function getGetItemById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetItemById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getUpdateItem200Response() {
  return orderItemResponseMock()
}

export function getUpdateItem400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getUpdateItem401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getUpdateItem403Response() {
  return {
    code: 403,
    result: 'This endpoint requires Oauth authentication!.',
    error: {
      reason: 403,
      message: 'This endpoint requires Oauth authentication!.',
    },
  }
}

export function getUpdateItem404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getUpdateItem5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getDeleteItemById400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getDeleteItemById401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getDeleteItemById403Response() {
  return {
    code: 403,
    result: 'This endpoint requires Oauth authentication!.',
    error: {
      reason: 403,
      message: 'This endpoint requires Oauth authentication!.',
    },
  }
}

export function getDeleteItemById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getDeleteItemById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetShipments200Response() {
  return listOrderShipmentsResponseMock()
}

export function getGetShipments401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetShipments5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetInvoiceByOrderId200Response() {
  return getInvoiceResponseMock()
}

export function getGetInvoiceByOrderId401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetInvoiceByOrderId5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetOrderEstimationTask200Response() {
  return getOrderEstimationTaskResponseMock()
}

export function getGetOrderEstimationTask401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetOrderEstimationTask404Response() {
  return {
    data: "Couldn't find order estimation with this UUID.",
    error: {
      reason: 'NotFound',
      message: "Couldn't find order estimation with this UUID.",
    },
  }
}

export function getGetOrderEstimationTask5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCreateOrderEstimationTask200Response() {
  return createOrderEstimationTaskResponseMock()
}

export function getCreateOrderEstimationTask400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCreateOrderEstimationTask5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getAddFile200Response() {
  return null
}

export function getAddFile400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getAddFile404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getAddFile5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetFileById200Response() {
  return null
}

export function getGetFileById400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetFileById404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetFileById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetCountries200Response() {
  return listCountriesResponseMock()
}

export function getGetCountries400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetCountries5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCalculateShppingRates200Response() {
  return {
    data: faker.helpers.multiple(() => ({
      shipping: faker.helpers.arrayElement([
        'STANDARD_CARBON_OFFSET',
        'STANDARD',
      ]),
      shipping_method_name: faker.lorem.text(),
      rate: faker.finance.amount(),
      currency: faker.finance.currency().code,
      min_delivery_days: faker.number.int({ min: 2, max: 15 }),
      max_delivery_days: faker.number.int({ min: 2, max: 15 }),
      min_delivery_date: dayjs(faker.date.future()).format('YYYY-MM-DD'),
      max_delivery_date: dayjs(faker.date.future()).format('YYYY-MM-DD'),
      shipments: faker.helpers.multiple(
        () => ({
          departure_country: faker.location.countryCode(),
          shipment_items: faker.helpers.multiple(
            () => ({
              catalog_variant_id: faker.number.int({ min: 1 }),
              quantity: faker.number.int({ min: 1, max: 5 }),
            }),
            { count: { min: 1, max: 15 } },
          ),
          custom_fees_possible: faker.datatype.boolean(0.2),
        }),
        { count: { min: 1, max: 6 } },
      ),

      extra: [],
    })),
  }
}

export function getCalculateShppingRates400Response() {
  return {
    data: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCalculateShppingRates5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetWarehouseProducts200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map(_ => ({
      id: 356,
      name: 'Black Heather',
      status: faker.helpers.arrayElement([
        'draft',
        'awaiting_approval',
        'approved',
        'declined',
        'suspended',
      ]),
      currency: 'USD',
      image_url:
        'https://example.com/upload/product-templates/d1/d1341a6efb49f59cc58172ce1c15eb20_l',
      retail_price: 21.54,
      warehouse_variants: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        id: 32453,
        name: 'Black Heather',
        sku: 'some-sku-12',
        image_url: 'url.to/your/image/location.png',
        retail_price: 32.56,
        quantity: 23,
        dimensions: {
          measurement_system: faker.helpers.arrayElement([
            'imperial',
            'metric',
          ]),
          width: 3.21,
          height: 4.56,
          length: 6.53,
          weight: 3,
        },
        _links: {
          self: { href: 'https://api.printful.com/v2/warehouse-variants/5678' },
        },
      })),
      _links: {
        self: { href: 'https://api.printful.com/v2/warehouse-products/1234' },
        warehouse_variants: {
          href: 'https://api.printful.com/v2/warehouse-products/1234/warehouse-variants',
        },
      },
    })),
    paging: {
      total: 100,
      offset: 10,
      limit: 100,
    },
    _links: {
      self: {
        href: 'https://api.printful.com/v2/warehouse-products?limit=10&offset=20',
      },
      next: {
        href: 'https://api.printful.com/v2/warehouse-products?limit=10&offset=30',
      },
      previous: {
        href: 'https://api.printful.com/v2/warehouse-products?limit=10&limit=10',
      },
      first: {
        href: 'https://api.printful.com/v2/warehouse-products?limit=10',
      },
      last: {
        href: 'https://api.printful.com/v2/warehouse-products?limit=10&offset=90',
      },
    },
  }
}

export function getGetWarehouseProducts401Response() {
  return {
    data: 'Malformed Authorization header',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header',
    },
  }
}

export function getGetWarehouseProducts5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetWarehouseProductById200Response() {
  return {
    data: {
      id: 356,
      name: 'Black Heather',
      status: faker.helpers.arrayElement([
        'draft',
        'awaiting_approval',
        'approved',
        'declined',
        'suspended',
      ]),
      currency: 'USD',
      image_url:
        'https://example.com/upload/product-templates/d1/d1341a6efb49f59cc58172ce1c15eb20_l',
      retail_price: 21.54,
      warehouse_variants: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        id: 32453,
        name: 'Black Heather',
        sku: 'some-sku-12',
        image_url: 'url.to/your/image/location.png',
        retail_price: 32.56,
        quantity: 23,
        stock_location: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map(_ => ({
          facility: 'Charlotte Steele Point, United States',
          stocked: 10,
          available: 10,
        })),
        dimensions: {
          measurement_system: faker.helpers.arrayElement([
            'imperial',
            'metric',
          ]),
          width: 3.21,
          height: 4.56,
          length: 6.53,
          weight: 3,
        },
        _links: {
          self: { href: 'https://api.printful.com/v2/warehouse-variants/5678' },
        },
      })),
      _links: {
        self: { href: 'https://api.printful.com/v2/warehouse-products/1234' },
        warehouse_variants: {
          href: 'https://api.printful.com/v2/warehouse-products/1234/warehouse-variants',
        },
      },
    },
  }
}

export function getGetWarehouseProductById401Response() {
  return {
    data: 'Malformed Authorization header',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header',
    },
  }
}

export function getGetWarehouseProductById404Response() {
  return {
    data: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetWarehouseProductById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCreateMockupGeneratorTasks200Response() {
  return null
}

export function getCreateMockupGeneratorTasks400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCreateMockupGeneratorTasks401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getCreateMockupGeneratorTasks404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getCreateMockupGeneratorTasks5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetMockupGeneratorTasks200Response() {
  return null
}

export function getGetMockupGeneratorTasks400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetMockupGeneratorTasks401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetMockupGeneratorTasks404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetMockupGeneratorTasks5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetWebhooks200Response() {
  return {
    code: 200,
    result: null,
  }
}

export function getGetWebhooks401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetWebhooks5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCreateWebhook200Response() {
  return {
    code: 200,
    result: null,
  }
}

export function getCreateWebhook400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCreateWebhook401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getCreateWebhook5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getDisableWebhook401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getDisableWebhook404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getDisableWebhook5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetWebhookEventConfiguration200Response() {
  return {
    code: 200,
    result: null,
  }
}

export function getGetWebhookEventConfiguration401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetWebhookEventConfiguration5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getCreateWebhookEventConfiguration200Response() {
  return {
    code: 200,
    result: null,
  }
}

export function getCreateWebhookEventConfiguration400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getCreateWebhookEventConfiguration401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getCreateWebhookEventConfiguration5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getDisableWebhookEvent401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getDisableWebhookEvent404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getDisableWebhookEvent5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetStoreById200Response() {
  return getStoreResponseMock()
}

export function getGetStoreById401Response() {
  return {
    data: 'Malformed Authorization header',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header',
    },
  }
}

export function getGetStoreById404Response() {
  return {
    data: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetStoreById5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetStores200Response() {
  return listStoresResponseMock()
}

export function getGetStores401Response() {
  return {
    data: 'Malformed Authorization header',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header',
    },
  }
}

export function getGetStores404Response() {
  return {
    data: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetStores5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}

export function getGetReports200Response() {
  return {
    data: {
      store_id: faker.number.int(),
      currency: 'USD',
      sales_and_costs: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        date: faker.lorem.words(),
        sales: faker.lorem.words(),
        fulfillment: faker.lorem.words(),
        profit: faker.lorem.words(),
        sales_discount: faker.lorem.words(),
        fulfillment_discount: faker.lorem.words(),
        sales_shipping: faker.lorem.words(),
        fulfillment_shipping: faker.lorem.words(),
      })),
      sales_and_costs_summary: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        date: faker.lorem.words(),
        order_count: faker.number.int(),
        costs: faker.lorem.words(),
        profit: faker.lorem.words(),
      })),
      printful_costs: {
        value: faker.lorem.words(),
        relative_difference: faker.lorem.words(),
      },
      profit: {
        value: faker.lorem.words(),
        relative_difference: faker.lorem.words(),
      },
      total_paid_orders: {
        value: faker.number.int(),
        relative_difference: faker.lorem.words(),
      },
      costs_by_amount: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        date: faker.lorem.words(),
        product_amount: faker.commerce.price(),
        digitization: faker.commerce.price(),
        branding: faker.commerce.price(),
        vat: faker.commerce.price(),
        sales_tax: faker.commerce.price(),
        shipping: faker.commerce.price(),
        discount: faker.commerce.price(),
        total: faker.commerce.price(),
      })),
      costs_by_product: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        product_id: faker.number.int(),
        product_name: faker.person.fullName(),
        fulfillment: faker.lorem.words(),
        sales: faker.lorem.words(),
        quantity: faker.number.int(),
      })),
      costs_by_variant: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map(_ => ({
        variant_id: faker.number.int(),
        variant_name: faker.person.fullName(),
        product_id: faker.number.int(),
        fulfillment: faker.lorem.words(),
        sales: faker.lorem.words(),
        quantity: faker.number.int(),
      })),
      average_fulfillment_time: {
        value: faker.lorem.words(),
        relative_difference: faker.lorem.words(),
      },
    },
  }
}

export function getGetReports400Response() {
  return {
    code: 400,
    result: 'Missing required parameters',
    error: {
      reason: 'BadRequest',
      message: 'Missing required parameters',
    },
  }
}

export function getGetReports401Response() {
  return {
    code: 401,
    result: 'Malformed Authorization header.',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header.',
    },
  }
}

export function getGetReports404Response() {
  return {
    code: 404,
    result: 'Not found',
    error: {
      reason: 'NotFound',
      message: 'Not found',
    },
  }
}

export function getGetApprovalSheets200Response() {
  return null
}

export function getGetApprovalSheets401Response() {
  return {
    data: 'Malformed Authorization header',
    error: {
      reason: 'BadRequest',
      message: 'Malformed Authorization header',
    },
  }
}

export function getGetApprovalSheets5XxResponse() {
  return {
    type: faker.lorem.words(),
    status: faker.number.int({ min: 500, max: 599 }),
    title: faker.lorem.words(),
    details: faker.lorem.words(),
    instance: faker.lorem.words(),
  }
}
